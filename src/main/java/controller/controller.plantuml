@startuml

title __CONTROLLER's Class Diagram__\n

  namespace controller {
    abstract class controller.BallController {
        - BallFace : Shape
        - Ball_Border_Color : Color
        - Ball_Inner_Color : Color
        - center : Point2D
        - centerX : double
        - centerY : double
        - down : Point2D
        - height : int
        - left : Point2D
        - right : Point2D
        - speedX : int
        - speedY : int
        - up : Point2D
        - width : int
        + BallController()
        + getBallFace()
        + getBorderColor()
        + getDownLocation()
        + getInnerColor()
        + getLeftLocation()
        + getPosition()
        + getRightLocation()
        + getSpeedX()
        + getSpeedY()
        + getUpLocation()
        + move()
        + moveTo()
        + render()
        + reverseX()
        + reverseY()
        + setDownLocation()
        + setLeftLocation()
        + setLocation()
        + setRightLocation()
        + setSpeedX()
        + setSpeedY()
        + setUpLocation()
        {abstract} # makeBall()
        {abstract} # setBallBorderColor()
        {abstract} # setBallInnerColor()
        - setPoints()
    }
  }
  

  namespace controller {
    abstract class controller.BrickController {
        {static} + DOWN_IMPACT : int
        {static} + LEFT_IMPACT : int
        {static} + RIGHT_IMPACT : int
        {static} + UP_IMPACT : int
        - Brick_Border_Color : Color
        - Brick_Inner_Color : Color
        - brickFace : Shape
        - broken : boolean
        - fullStrength : int
        {static} - rnd : Random
        - strength : int
        + BrickController()
        + findImpact()
        {abstract} + getBrick()
        + getBrickBorderColor()
        + getBrickFace()
        + getBrick_Inner_Color()
        {static} + getRnd()
        + impact()
        + isBroken()
        + render()
        + repair()
        + setBrickFace()
        + setImpact()
        {static} + setRnd()
        {abstract} # makeBrickFace()
        {abstract} # setBrickBorderColor()
        {abstract} # setBrickInnerColor()
    }
  }
  

  namespace controller {
    class controller.CrackController {
        {static} + DOWN : int
        {static} + HORIZONTAL : int
        {static} + LEFT : int
        {static} + RIGHT : int
        {static} + UP : int
        {static} + VERTICAL : int
        {static} - CRACK_SECTIONS : int
        {static} - JUMP_PROBABILITY : double
        - crack : GeneralPath
        - crackDepth : int
        - steps : int
        + CrackController()
        + draw()
        + makeCrack()
        + reset()
        # makeCrack()
        - inMiddle()
        - jumps()
        - makeRandomPoint()
        - randomInBounds()
    }
  }
  

  namespace controller {
    class controller.DebugConsoleController {
        {static} - DEBUG_CONSOLE_TITLE : String
        - owner : JFrame
        + DebugConsoleController()
        + windowActivated()
        + windowClosed()
        + windowClosing()
        + windowDeactivated()
        + windowDeiconified()
        + windowIconified()
        + windowOpened()
        - initialize()
        - setLocation()
    }
  }
  

  namespace controller {
    class controller.GameBoardController {
        + message : String
        {static} - GAMEBOARD_COLOR : Color
        {static} - GAMEBOARD_HEIGHT : int
        - GAMEBOARD_TIMER : Timer
        {static} - GAMEBOARD_WIDTH : int
        - ShowPauseMenu : boolean
        - name : String
        + GameBoardController()
        + inputname()
        + keyPressed()
        + keyReleased()
        + keyTyped()
        + mouseClicked()
        + mouseDragged()
        + mouseEntered()
        + mouseExited()
        + mouseMoved()
        + mousePressed()
        + mouseReleased()
        + onLostFocus()
        + paint()
        - BackgroundColor()
        - drawString()
        - initialize()
    }
  }
  

  namespace controller {
    class controller.GameFrameController {
        {static} - GAMEFRAME_TITLE_TEXT : String
        - Gaming : boolean
        + GameFrameController()
        + enableGameBoard()
        + initialize()
        + windowGainedFocus()
        + windowLostFocus()
        - autoLocate()
    }
  }
  

  namespace controller {
    class controller.PlayerController {
        - BallPoint : Point
        - BallPointX : int
        - BallPointY : int
        - Max : int
        - Min : int
        - MoveAmount : int
        {static} - PLAYER_BORDER_COLOR : Color
        {static} - PLAYER_INNER_COLOR : Color
        {static} - PLAYER_MOVE_AMOUNT : int
        - PlayerFace : Rectangle
        + PlayerController()
        {static} + getBorderColor()
        {static} + getInnerColor()
        + getPlayerFace()
        + impact()
        + move()
        + moveLeft()
        + moveRight()
        + moveTo()
        + stop()
        - makeRectangle()
    }
  }
  

  namespace controller {
    class controller.WallController {
        {static} + LEVELS_COUNT : int
        - BallLost : boolean
        {static} - CEMENT_BRICK : int
        {static} - CLAY_BRICK : int
        {static} - STEEL_BRICK : int
        - StartPoint : Point
        - area : Rectangle
        - ballCount : int
        - brickCount : int
        - bricks : BrickController[]
        - random : Random
        + WallController()
        + ballEnd()
        + ballReset()
        + findImpacts()
        + getBall()
        + getBallCount()
        + getBrickCount()
        + getBricks()
        + getPlayer()
        + isBallLost()
        + isDone()
        + move()
        + render()
        + resetBallCount()
        + setBall()
        + setBallXSpeed()
        + setBallYSpeed()
        + setBrickCount()
        + setBricks()
        + setPlayer()
        + wallReset()
        - impactBorder()
        - impactWall()
        - makeBall()
    }
  }
  

  controller.CrackController o-- controller.BrickController : brick
  controller.DebugConsoleController .up.|> java.awt.event.WindowListener
  controller.DebugConsoleController -up-|> javax.swing.JDialog
  controller.DebugConsoleController o-- view.DebugPanelView : DebugPanel
  controller.DebugConsoleController o-- controller.GameBoardController : gameboard
  controller.DebugConsoleController o-- model.LevelModel : level
  controller.DebugConsoleController o-- controller.WallController : wall
  controller.GameBoardController .up.|> java.awt.event.KeyListener
  controller.GameBoardController .up.|> java.awt.event.MouseListener
  controller.GameBoardController .up.|> java.awt.event.MouseMotionListener
  controller.GameBoardController -up-|> javax.swing.JComponent
  controller.GameBoardController o-- controller.DebugConsoleController : DebugConsole
  controller.GameBoardController o-- model.LevelModel : level
  controller.GameBoardController o-- view.PauseMenuView : pauseMenuView
  controller.GameBoardController o-- controller.WallController : wall
  controller.GameFrameController .up.|> java.awt.event.WindowFocusListener
  controller.GameFrameController -up-|> javax.swing.JFrame
  controller.GameFrameController o-- controller.GameBoardController : GameBoard
  controller.GameFrameController o-- view.HomeMenuView : HomeMenu
  controller.GameFrameController o-- view.ExitButtonView : exitBtn
  controller.GameFrameController o-- view.InstructionView : instructionView
  controller.GameFrameController o-- view.StartButtonView : startBtn
  controller.WallController o-- controller.BallController : ball
  controller.WallController o-- controller.PlayerController : player
  controller.WallController o-- view.PlayerView : playerView


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
